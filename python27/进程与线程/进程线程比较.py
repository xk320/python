# -*- coding: UTF-8 -*-
# 多进程和多线程，这是实现多任务最常用的两种方式，现在我们讨论下两种方式的优缺点。
# 首先要实现多任务，通常我们会设计master-worker模式，master负责分配任务，worker 负责执行任务，因此多任务环境下通常只有一个master，多个
# worker。如果用多线程实现master-worker，只进程就是master，其他进程就是worker
# 如果用多线程实现master-worker，主线程就是master，其他线程就是worker
# 多进程模式最大的优点就是稳定性高，因为一个子进程崩溃来，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是master进程只负责
# 分配任务，挂掉的概率低）著名的apache最早就采用多进程模式。
# 多进程模式最大的缺点是创建进程的代价大，在Unix/Linux系统下，用fock调用还行，在windows下创建进程开销巨大，另外操作系统同时运行进程数也是
# 有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会称问题。
# 多线程模式通常比多进程模式快一点，但是也快不到哪里去，而且多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共
# 享进程的内存，在windows下，如果一个线程执行的代码除了问题，你经常可以看到这样的提示： 该程序执行了非法操作，即将关闭 ，其实往往是某个线程
# 出问题，但是操作系统会强制结束整个进程。
# 在windows下多线程的效率比多进程要高，所以微信的IIS服务默认采用多线程模式，由于多线程存在稳定性的问题，IIS的稳定性就不如apache

# 线程切换
# 无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？
# 我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。
# 如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型，或者批处理任务模型。
# 假设你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU
# 执行多任务是一样的了，以幼儿园小朋友的眼光来看，你就正在同时写5科作业。
# 但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新
# 环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新
# 任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进
# 行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。
# 所以，多任务一点多到一个限度，就会消耗掉系统所有的资源，结果效率急剧下降，所有任务都做不好

# 计算密集型 VS IO密集型
# 是否采用多任务的第二个考虑是任务的类型，我们可以把任务分为计算密集型和IO密集型
# 计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可
# 以用多任务完成，但是任务越多，花在任务切换的时间越多，CPU执行任务的效率就越低，所以要最高效的利用CP，计算密集型任务同时进行的数量应当等于
# CPU的核心数
# 计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。python这样的脚本语言运行效率很低，完全不适合计算密集型任务
# 第二种任务类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗少，任务的大部分时间都是在等待IO操作完成，（因
# 为IO速度远远低于CPU和内存的速度）。对于IO密集型任务越多、CPU效率越高，但也有一个限度，常见但大部分任务都是IO密集型任务，比如web应用
# IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上都时间很少，因此用运行速度极快的C语言替换用python这样的运行速度极低的脚本语言，完全
# 无法提升运行效率。对于IS密集型任务，最适合的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选。

# 异步IO
# 考虑到CPU和IO之间巨大到速度差异，一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模式会导致别的任务无法并行执行，因此我们才需
# 要多进程模式或者多线程模式支持多任务并发执行。现代操作系统对IO操作已经做出了巨大对改进，最大对特点就是支持异步I。如果充分利用操作系统提供
# 的异步IO支持，就可以用单进程单线程模式来执行任务，这种全新的模型成为事件驱动模型，nginx就是支持异步IO的web服务器，它在单核CPU上采用单进程
# 模型就可以高效地支持多任务，在多核CPU上，可以运行多个进程，允许利用多核CP。由于系统的总进程数十分有限，因此操作系统调度非常高效。用异步IO
# 编程模式来实现多任务是一个主要的趋势。
# 对应到python语言，单进程的异步编程模型成为协程，有了协程的支持就可以基于事件驱动编写高效的多任务程序