# -*- coding: UTF-8 -*-
# 协程又称微线程，纤程。英文名Coroutine
# 协程的概念很早就提出来了，但直到最近几年才在某些语言（如lua）中得到广泛应用
# 子程序或者称为函数，在所有语言中都是层级调用，比如A调用，B在执行过程中又调用，C执行完毕返回，B执行完毕返回，最后A执行完毕。
# 所以子程序调用是通过栈实现的，一个线程就是执行一个子程序。
# 子程序调用总是一个入口，一次返回，调用顺序是明确的，而协程的调用和子程序不同
# 协程看上去也是子程序，但是执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候在返回来接着执行
# 注意，在一个子程序中断，去执行其他子程序，不是函数调用，有点类似CPU的中断，比如子程序A、B
# def A():
#     print 1
#     print 2
#     print 3
#
# def B():
#     print 'a'
#     print 'b'
#     print 'c'
#
# #假设由协程执行，在执行A的过程中，可以随时中断去执行B，B也可能在执行过程中随时中断在去执行A，结果可能是：
# 1
# 2
# a
# b
# 3
# c
# 但是A中没有调用B的，所以协程的调用比函数调用理解起来更难一些
# 看起来A、B的执行有点像多线程，但协程的特点在于一个线程执行，那和多线程比，协程有何优势？
# 最大的优势就是协程极高的执行效率，因为子线程切换不是县城切换，而是有程序自身控制，因此没有线程切换的开销，和多线程比，线程数量越多，协程的
# 性能优势就越明显
# 第二大优势就是不需要多线程的锁机制，因为只有一个县城，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效
# 率比多线程高很多
# 因为协程是一个县城执行，那么如何利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，有充分发挥协程的高效率，可获得极高的性能
# python对协程的支持还非常有限，用在generator中的yield可以一定程度上实现协程，虽然支持不完全，但已经可以发挥相当大的威力了
# 举例
# 传统的生产者-消费者模型是一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但一不小心就可能死锁
# 如果改用协程，生产者生产消息后，直接通过yield跳转到消费者开始执行，待消费者执行完毕后，切换回生产者继续生产，效率极高：
import time


def consumer():
    r = ''
    while True:
        n = yield r
        if not n:
            return
        print ('[CONSUMER] Consuming %s ...' % n)
        time.sleep(1)
        r = '200 OK'


def produce(c):
    c.next()
    n = 0
    while n < 5:
        n += 1
        print ('[PRODUCER] Producing %s ...' % n)
        r = c.send(n)
        print ('[PRODUCER] Consumer return %s ...' % r)
    c.close()


if __name__ == '__main__':
    c = consumer()
    produce(c)

# 注意consumer函数是一个generator（生成器），把一个consumer传入produce后
#   首先调用c.next()
#   然后，一旦生产了东西，通过c.send(n)切换到consumer执行
#   consumer通过yield拿到消息，处理，又通过yield把结果传回
#   produce拿到cousumer处理的结果，继续生产下一个消息
#   produce决定不生产了，通过c.close()关闭consumer，整个过程结束
# 整个流程无锁，由一个线程执行，produce和consumer写作完成任务，所以称为协程，而非线程的抢占式多任务。
# 协程的特点：     子程序就是协程的一种特例
